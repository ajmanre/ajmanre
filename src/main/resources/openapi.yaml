openapi: "3.0.2"
info:
  title: API Ajmanre
  version: "1.0"
servers:
  - url: http://localhost:{port}
    description: The production API server
    variables:
      port:
        enum:
          - '8443'
          - '443'
        default: '8443'
tags:
  - name: Ajmanre
    description: Ajmanre.
paths:
  /auth/signin:
    post:
      tags:
        - "signin"
      summary: "signin"
      description: "signin"
      operationId: "signin"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: "JWT response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JwtResponse"
        "405":
          description: "Invalid input"
  /auth/signup:
    post:
      tags:
        - "signup"
      summary: "signup"
      description: "signup"
      operationId: "signup"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequest"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "405":
          description: "Invalid input"
  /prop/type:
    post:
      tags:
        - "propType"
      summary: "property type"
      operationId: "propType"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertyTypeRequest"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "405":
          description: "Invalid input"
  /prop/type/hierarchy:
    get:
      tags:
        - "propTypeHierarchy"
      summary: "property type hierarchy"
      operationId: "propTypeHierarchy"
      responses:
        "200":
          description: "property type hierarchy"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PropertyTypeHierarchy"
        "405":
          description: "Invalid input"
  /area:
    post:
      tags:
        - "area"
      summary: "area locality"
      operationId: "areaPost"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AreaRequest"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /area/all:
    get:
      tags:
        - "areaAll"
      summary: "areas in emirate"
      operationId: "areaAll"
      responses:
        "200":
          description: "property type hierarchy"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Area"
        "405":
          description: "Invalid input"
  /select:
    post:
      tags:
        - "select"
      summary: "select"
      operationId: "selectPost"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SelectRequest"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /select/{list}:
    get:
      tags:
        - "selectList"
      summary: "selectList of values"
      operationId: "selectList"
      parameters:
        - in: path
          name : list
          schema:
            type: string
          required: true
          description: "select list type e.g. prop-status"
      responses:
        "200":
          description: "property type hierarchy"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Select"
  /agency:
    post:
      tags:
        - "agencyAdd"
      summary: "add agency"
      operationId: "agencyPost"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgencyRequest"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /agency/{page}/{size}:
    get:
      tags:
        - "agencyPageSize"
      summary: "agency listing"
      operationId: "agencyPageSize"
      parameters:
        - in: path
          name : page
          schema:
            type: integer
            default: 1
          required: true
          description: "page no of the list pagination"
        - in: path
          name : size
          schema:
            type: integer
            default: 5
          required: true
          description: "size of the pagination"
      responses:
        "200":
          description: "agency pagination listing"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Agency"
  /agency/{agencyId}:
    get:
      tags:
        - "agencyId"
      summary: "agency get"
      operationId: "agencyId"
      parameters:
        - in: path
          name : agencyId
          schema:
            type: string
          required: true
          description: "agency details by id"
      responses:
        "200":
          description: "agency pagination listing"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Agency"
  /agency/{id}:
    put:
      tags:
        - "agencyEdit"
      summary: "edit agency"
      operationId: "agencyPut"
      parameters:
        - in: path
          name : id
          schema:
            type: string
          required: true
          description: "update agency details by id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Agency"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: "Bad input"
components:
  schemas:
    LoginRequest:
      type: "object"
      required:
        - username
        - password
      properties:
        username:
          type: "string"
          description: "Username"
        password:
          type: "string"
          description: "Password"
    JwtResponse:
      type: "object"
      properties:
        accessToken:
          type: "string"
          description: "token"
        type:
          type: "string"
          description: "type"
        id:
          type: "string"
          description: "id"
        username:
          type: "string"
          description: "Username"
        email:
          type: "string"
          description: "email"
        roles:
          type: "array"
          description: "roles"
          items:
            type: string
          example: ['admin', 'agent', 'user']
    SignupRequest:
      type: "object"
      required:
        - username
        - password
        - email
      properties:
        username:
          type: "string"
          description: "Username"
        password:
          type: "string"
          description: "Password"
        email:
          type: "string"
          description: "email"
        roles:
          type: "array"
          description: "roles"
          items:
            type: string
          example: ['admin', 'agent', 'user']
    MessageResponse:
      type: "object"
      required:
        - message
      properties:
        message:
          type: "string"
          description: "Message"
        identifier:
          type: "string"
          description: "If identifier has to be in response"
    PropertyTypeRequest:
      type: "object"
      required:
        - type
        - order
      properties:
        id:
          type: "string"
          description: "hierarchy id"
        type:
          type: "string"
          description: "type of the property"
        order:
          type: "integer"
          description: "order list on this value"
        child:
          $ref: "#/components/schemas/PropertyTypeChild"
    PropertyTypeChild:
      type: "object"
      required:
        - type
        - order
      properties:
        type:
          type: "string"
          description: "type of the property"
        order:
          type: "integer"
          description: "order list on this value"
        child:
          $ref: "#/components/schemas/PropertyTypeChild"
    PropertyType:
      type: "object"
      required:
        - id
        - enable
        - type
        - order
      properties:
        id:
          type: "string"
        enable:
          type: "boolean"
        type:
          type: "string"
          description: "type of the property"
        order:
          type: "integer"
          description: "order list on this value"
        child:
          $ref: "#/components/schemas/PropertyTypeChild"
    PropertyTypeHierarchy:
      type: "object"
      required:
        - type
        - order
      properties:
        id:
          type: "string"
          description: "id of hierarchy"
        type:
          type: "string"
          description: "type of the property"
        order:
          type: "integer"
          description: "order list on this value"
        children:
          type: "array"
          description: "property type hierarchy"
          items:
            $ref: "#/components/schemas/PropertyTypeItem"
    PropertyTypeItem:
      type: "object"
      required:
        - type
        - order
      properties:
        type:
          type: "string"
          description: "type of the property"
        order:
          type: "integer"
          description: "order list on this value"
        children:
          type: "array"
          description: "property type hierarchy"
          items:
            $ref: "#/components/schemas/PropertyTypeItem"
    AreaRequest:
      type: "object"
      required:
        - name
        - emirate
        - country
      properties:
        name:
          type: "string"
          description: "area in emirate"
        locality:
          type: "string"
          description: "location"
        emirate:
          type: "string"
          description: "emirate of UAE"
        country:
          type: "string"
          description: "UAE country"
    Area:
      type: "object"
      required:
        - id
        - name
        - emirate
        - country
      properties:
        id:
          type: "string"
          description: "id of area"
        name:
          type: "string"
          description: "area in emirate"
        locality:
          type: "string"
          description: "location"
        emirate:
          type: "string"
          description: "emirate of UAE"
        country:
          type: "string"
          description: "UAE country"
    SelectRequest:
      type: "object"
      required:
        - key
        - value
        - order
        - type
      properties:
        key:
          type: "string"
        value:
          type: "string"
        order:
          type: "integer"
          description: "sorting order"
        type:
          type: "string"
          description: "type for the list e.g. prop-status"
    Select:
      type: "object"
      required:
        - id
        - key
        - value
        - order
        - type
      properties:
        id:
          type: "string"
        key:
          type: "string"
        value:
          type: "string"
        order:
          type: "integer"
          description: "sorting order"
        type:
          type: "string"
          description: "type for the list e.g. prop-status"
    AgencyRequest:
      type: "object"
      required:
        - name
      properties:
        name:
          type: "string"
        tel:
          type: "string"
        facebook:
          type: "string"
          description: "facebook page"
        insta:
          type: "string"
          description: "instagram profile id"
        adresses:
          type: "array"
          description: "addresses of agency"
          items:
            $ref: "#/components/schemas/Address"
        contacts:
          type: "array"
          description: "contacts of agency"
          items:
            $ref: "#/components/schemas/Contact"
    Address:
      type: "object"
      required:
        - adressLine1
        - city
      properties:
        adressLine1:
          type: "string"
        adressLine2:
          type: "string"
        area:
          type: "string"
        city:
          type: "string"
        country:
          type: "string"
    Contact:
      type: "object"
      required:
        - name
      properties:
        name:
          type: "string"
        tel:
          type: "string"
        mobile:
          type: "string"
        email:
          type: "string"
    Agency:
      type: "object"
      required:
        - id
        - name
      properties:
        id:
          type: "string"
        name:
          type: "string"
        tel:
          type: "string"
        facebook:
          type: "string"
          description: "facebook page"
        insta:
          type: "string"
          description: "instagram profile id"
        adresses:
          type: "array"
          description: "addresses of agency"
          items:
            $ref: "#/components/schemas/Address"
        contacts:
          type: "array"
          description: "contacts of agency"
          items:
            $ref: "#/components/schemas/Contact"