openapi: "3.0.2"
info:
  title: API Ajmanre
  version: "1.0"
servers:
  - url: http://localhost:{port}
    description: The local API server
    variables:
      port:
        enum:
          - '8443'
          - '443'
        default: '8443'
  - url: https://angular.ajmanre.com:{port}
    description: The local API server
    variables:
      port:
        enum:
          - '8443'
          - '443'
        default: '8443'
tags:
  - name: Ajmanre
    description: Ajmanre.
paths:
  /auth/signin:
    post:
      tags:
        - "signin"
      summary: "signin"
      description: "signin"
      operationId: "signin"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: "JWT response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JwtResponse"
        "405":
          description: "Invalid input"
  /auth/signup:
    post:
      tags:
        - "signup"
      summary: "signup"
      description: "signup"
      operationId: "signup"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequest"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "405":
          description: "Invalid input"
  /prop/type:
    post:
      tags:
        - "propType"
      summary: "property type"
      operationId: "propType"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertyTypeRequest"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "405":
          description: "Invalid input"
  /prop/type/hierarchy:
    get:
      tags:
        - "propTypeHierarchy"
      summary: "property type hierarchy"
      operationId: "propTypeHierarchy"
      responses:
        "200":
          description: "property type hierarchy"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PropertyTypeHierarchy"
        "405":
          description: "Invalid input"
  /area:
    post:
      tags:
        - "area"
      summary: "area locality"
      operationId: "areaPost"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AreaRequest"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /area/all:
    get:
      tags:
        - "areaAll"
      summary: "areas in emirate"
      operationId: "areaAll"
      responses:
        "200":
          description: "property type hierarchy"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Area"
        "405":
          description: "Invalid input"
  /select:
    post:
      tags:
        - "select"
      summary: "select"
      operationId: "selectPost"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SelectRequest"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /select/{list}:
    get:
      tags:
        - "selectList"
      summary: "selectList of values"
      operationId: "selectList"
      parameters:
        - in: path
          name : list
          schema:
            type: string
          required: true
          description: "select list type e.g. prop-status"
      responses:
        "200":
          description: "property type hierarchy"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Select"
  /agency:
    post:
      tags:
        - "agencyAdd"
      summary: "add agency"
      operationId: "agencyPost"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgencyRequest"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /agency/{page}/{size}:
    get:
      tags:
        - "agencyPageSize"
      summary: "agency listing"
      operationId: "agencyPageSize"
      parameters:
        - in: path
          name : page
          schema:
            type: integer
            default: 1
          required: true
          description: "page no of the list pagination"
        - in: path
          name : size
          schema:
            type: integer
            default: 5
          required: true
          description: "size of the pagination"
      responses:
        "200":
          description: "agency pagination listing"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgencyPage"
  /agency/{agencyId}:
    get:
      tags:
        - "agencyId"
      summary: "agency get"
      operationId: "agencyId"
      parameters:
        - in: path
          name : agencyId
          schema:
            type: string
          required: true
          description: "agency details by id"
      responses:
        "200":
          description: "agency pagination listing"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agency"
  /agency/{id}:
    put:
      tags:
        - "agencyEdit"
      summary: "edit agency"
      operationId: "agencyPut"
      parameters:
        - in: path
          name : id
          schema:
            type: string
          required: true
          description: "update agency details by id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Agency"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /agency/source:
    get:
      tags:
        - "agencySourceList"
      summary: "agency source list"
      operationId: "agencySourceList"
      responses:
        "200":
          description: "agency source list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Source"
  /agent:
    post:
      tags:
        - "agentAdd"
      summary: "add agent"
      operationId: "agentPost"
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgentRequest"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /agent/{page}/{size}:
    get:
      tags:
        - "agentPageSize"
      summary: "agent listing"
      operationId: "agentPageSize"
      parameters:
        - in: path
          name : page
          schema:
            type: integer
            default: 1
          required: true
          description: "page no of the list pagination"
        - in: path
          name : size
          schema:
            type: integer
            default: 5
          required: true
          description: "size of the pagination"
      responses:
        "200":
          description: "agency pagination listing"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentPage"
  /agent/{agentId}:
    get:
      tags:
        - "agentId"
      summary: "agent get"
      operationId: "agentId"
      parameters:
        - in: path
          name : agentId
          schema:
            type: string
          required: true
          description: "agent details by id"
      responses:
        "200":
          description: "agent pagination listing"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agent"
  /agent/{id}:
    put:
      tags:
        - "agentEdit"
      summary: "edit agent"
      operationId: "agentPut"
      parameters:
        - in: path
          name : id
          schema:
            type: string
          required: true
          description: "update agent details by id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Agent"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /agent/source:
    get:
      tags:
        - "agentSourceList"
      summary: "agent source list"
      operationId: "agentSourceList"
      responses:
        "200":
          description: "agent source list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Source"
  /agent/by/{agencyId}:
    get:
      tags:
        - "agentByAgencyId"
      summary: "Agent By Agency Id"
      operationId: "agentByAgencyId"
      parameters:
        - in: path
          name : agencyId
          schema:
            type: string
          required: true
          description: "Agent By Agency Id"
      responses:
        "200":
          description: "Agent By Agency Id"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Agent"
  /property:
    post:
      tags:
        - "propertyAdd"
      summary: "add property"
      operationId: "propertyPost"
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Property"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /property/retrieve:
    post:
      tags:
        - "propertyRetrieve"
      summary: "property retrieve"
      operationId: "propertyRetrieve"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertySpec"
      responses:
        "200":
          description: "agency pagination listing"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyPage"
  /property/get/{propertyId}:
    get:
      tags:
        - "propertyId"
      summary: "property get"
      operationId: "propertyId"
      parameters:
        - in: path
          name : propertyId
          schema:
            type: string
          required: true
          description: "property details by id"
      responses:
        "200":
          description: "agent pagination listing"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Property"
  /property/{id}:
    put:
      tags:
        - "propertyEdit"
      summary: "edit property"
      operationId: "propertyPut"
      parameters:
        - in: path
          name : id
          schema:
            type: string
          required: true
          description: "update property details by id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Property"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /property/my/listing:
    get:
      tags:
        - "myPropListing"
      summary: "my property posted by me list"
      operationId: "myPropListing"
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
      responses:
        "200":
          description: "my property posted by me list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Property"
  /property/agency/listing:
    get:
      tags:
        - "agencyPropListing"
      summary: "agency property posted by me list"
      operationId: "agencyPropListing"
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
      responses:
        "200":
          description: "agency property posted by me list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Property"
  /property/listing/{agencyId}:
    get:
      tags:
        - "propListingByAgency"
      summary: "property listing by agency"
      operationId: "propListingByAgency"
      parameters:
        - in: path
          name : agencyId
          schema:
            type: string
          required: true
          description: "property listing by agency id"
      responses:
        "200":
          description: "agency property posted by me list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Property"
  /requirement:
    post:
      tags:
        - "requirementAdd"
      summary: "add requirement"
      operationId: "requirementPost"
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Requirement"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /requirement/{page}/{size}:
    get:
      tags:
        - "requirementPageSize"
      summary: "requirement listing"
      operationId: "requirementPageSize"
      parameters:
        - in: path
          name : page
          schema:
            type: integer
            default: 1
          required: true
          description: "page no of the list pagination"
        - in: path
          name : size
          schema:
            type: integer
            default: 5
          required: true
          description: "size of the pagination"
      responses:
        "200":
          description: "requirement pagination listing"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequirementPage"
  /requirement/{reqId}:
    get:
      tags:
        - "reqId"
      summary: "requirement get"
      operationId: "reqId"
      parameters:
        - in: path
          name : reqId
          schema:
            type: string
          required: true
          description: "requirement details by id"
      responses:
        "200":
          description: "requirement pagination listing"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Requirement"
  /requirement/{id}:
    put:
      tags:
        - "requirementEdit"
      summary: "edit requirement"
      operationId: "requirementPut"
      parameters:
        - in: path
          name : id
          schema:
            type: string
          required: true
          description: "update requirement details by id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Requirement"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /user/{page}/{size}:
    get:
      tags:
        - "userPageSize"
      summary: "users listing"
      operationId: "userPageSize"
      parameters:
        - in: path
          name : page
          schema:
            type: integer
            default: 1
          required: true
          description: "page no of the list pagination"
        - in: path
          name : size
          schema:
            type: integer
            default: 5
          required: true
          description: "size of the pagination"
      responses:
        "200":
          description: "users pagination listing"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPage"
  /user/all:
    get:
      tags:
        - "userAll"
      summary: "all users"
      operationId: "userAll"
      responses:
        "200":
          description: "user all"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  /user/changePassword:
    post:
      tags:
        - "changePassword"
      summary: "change Password"
      operationId: "changePassword"
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePassword"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /lead:
    post:
      tags:
        - "leadAdd"
      summary: "add lead"
      operationId: "leadPost"
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Lead"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /lead/{page}/{size}:
    get:
      tags:
        - "leadPageSize"
      summary: "lead listing"
      operationId: "leadPageSize"
      parameters:
        - in: path
          name : page
          schema:
            type: integer
            default: 1
          required: true
          description: "page no of the list pagination"
        - in: path
          name : size
          schema:
            type: integer
            default: 5
          required: true
          description: "size of the pagination"
      responses:
        "200":
          description: "lead pagination listing"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LeadPage"
  /lead/{leadId}:
    get:
      tags:
        - "leadId"
      summary: "lead get"
      operationId: "leadId"
      parameters:
        - in: path
          name : leadId
          schema:
            type: string
          required: true
          description: "lead details by id"
      responses:
        "200":
          description: "lead pagination listing"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Lead"
  /lead/{id}:
    put:
      tags:
        - "leadEdit"
      summary: "edit lead"
      operationId: "leadPut"
      parameters:
        - in: path
          name : id
          schema:
            type: string
          required: true
          description: "update lead details by id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Lead"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /lead/all:
    get:
      tags:
        - "leadAll"
      summary: "all leads order by latest first"
      operationId: "leadAll"
      responses:
        "200":
          description: "lead all"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Lead"
  /enquiry:
    post:
      tags:
        - "enquiryAdd"
      summary: "add enquiry"
      operationId: "enquiryPost"
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Enquiry"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /enquiry/{page}/{size}:
    get:
      tags:
        - "enquiryPageSize"
      summary: "enquiry listing"
      operationId: "enquiryPageSize"
      parameters:
        - in: path
          name : page
          schema:
            type: integer
            default: 1
          required: true
          description: "page no of the list pagination"
        - in: path
          name : size
          schema:
            type: integer
            default: 5
          required: true
          description: "size of the pagination"
      responses:
        "200":
          description: "lead pagination listing"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnquiryPage"
  /enquiry/{enquiryId}:
    get:
      tags:
        - "enquiryId"
      summary: "enquiry get"
      operationId: "enquiryId"
      parameters:
        - in: path
          name : enquiryId
          schema:
            type: string
          required: true
          description: "enquiry details by id"
      responses:
        "200":
          description: "enquiry pagination listing"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Enquiry"
  /enquiry/{id}:
    put:
      tags:
        - "enquiryEdit"
      summary: "enquiry edit"
      operationId: "enquiryPut"
      parameters:
        - in: path
          name : id
          schema:
            type: string
          required: true
          description: "update enquiry details by id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Enquiry"
      responses:
        "200":
          description: "MessageResponse"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: "Bad input"
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginRequest:
      type: "object"
      required:
        - username
        - password
      properties:
        username:
          type: "string"
          description: "Username"
        password:
          type: "string"
          description: "Password"
    JwtResponse:
      type: "object"
      properties:
        accessToken:
          type: "string"
          description: "token"
        type:
          type: "string"
          description: "type"
        id:
          type: "string"
          description: "id"
        username:
          type: "string"
          description: "Username"
        name:
          type: "string"
          description: "name"
        email:
          type: "string"
          description: "email"
        roles:
          type: "array"
          description: "roles"
          items:
            type: string
          example: ['admin', 'agent', 'user']
        agent:
          $ref: "#/components/schemas/Source"
        agency:
          $ref: "#/components/schemas/Source"
    SignupRequest:
      type: "object"
      required:
        - username
        - password
        - email
        - name
      properties:
        username:
          type: "string"
          description: "Username"
        password:
          type: "string"
          description: "Password"
        name:
          type: "string"
          description: "name"
        email:
          type: "string"
          description: "email"
        agencyName:
          type: "string"
          description: "agencyName"
        roles:
          type: "array"
          description: "roles, admin, agent, agency, user (individual), owner"
          items:
            type: string
          example: ['admin', 'agent', 'agency', 'owner', 'user']
    MessageResponse:
      type: "object"
      required:
        - message
      properties:
        message:
          type: "string"
          description: "Message"
        identifier:
          type: "string"
          description: "If identifier has to be in response"
    PropertyTypeRequest:
      type: "object"
      required:
        - type
        - order
      properties:
        id:
          type: "string"
          description: "hierarchy id"
        type:
          type: "string"
          description: "type of the property"
        order:
          type: "integer"
          description: "order list on this value"
        child:
          $ref: "#/components/schemas/PropertyTypeChild"
    PropertyTypeChild:
      type: "object"
      required:
        - type
        - order
      properties:
        type:
          type: "string"
          description: "type of the property"
        order:
          type: "integer"
          description: "order list on this value"
        child:
          $ref: "#/components/schemas/PropertyTypeChild"
    PropertyType:
      type: "object"
      required:
        - id
        - enable
        - type
        - order
      properties:
        id:
          type: "string"
        enable:
          type: "boolean"
        type:
          type: "string"
          description: "type of the property"
        order:
          type: "integer"
          description: "order list on this value"
        child:
          $ref: "#/components/schemas/PropertyTypeChild"
    PropertyTypeHierarchy:
      type: "object"
      required:
        - type
        - order
      properties:
        id:
          type: "string"
          description: "id of hierarchy"
        type:
          type: "string"
          description: "type of the property"
        order:
          type: "integer"
          description: "order list on this value"
        children:
          type: "array"
          description: "property type hierarchy"
          items:
            $ref: "#/components/schemas/PropertyTypeItem"
    PropertyTypeItem:
      type: "object"
      required:
        - type
        - order
      properties:
        type:
          type: "string"
          description: "type of the property"
        order:
          type: "integer"
          description: "order list on this value"
        children:
          type: "array"
          description: "property type hierarchy"
          items:
            $ref: "#/components/schemas/PropertyTypeItem"
    AreaRequest:
      type: "object"
      required:
        - name
        - emirate
        - country
      properties:
        name:
          type: "string"
          description: "area in emirate"
        locality:
          type: "string"
          description: "location"
        emirate:
          type: "string"
          description: "emirate of UAE"
        country:
          type: "string"
          description: "UAE country"
    Area:
      type: "object"
      required:
        - id
        - name
        - emirate
        - country
      properties:
        id:
          type: "string"
          description: "id of area"
        name:
          type: "string"
          description: "area in emirate"
        locality:
          type: "string"
          description: "location"
        emirate:
          type: "string"
          description: "emirate of UAE"
        country:
          type: "string"
          description: "UAE country"
    SelectRequest:
      type: "object"
      required:
        - key
        - value
        - order
        - type
      properties:
        key:
          type: "string"
        value:
          type: "string"
        order:
          type: "integer"
          description: "sorting order"
        type:
          type: "string"
          description: "type for the list e.g. prop-status"
    Select:
      type: "object"
      required:
        - id
        - key
        - value
        - order
        - type
      properties:
        id:
          type: "string"
        key:
          type: "string"
        value:
          type: "string"
        order:
          type: "integer"
          description: "sorting order"
        type:
          type: "string"
          description: "type for the list e.g. prop-status"
    AgencyRequest:
      type: "object"
      required:
        - name
      properties:
        name:
          type: "string"
        tel:
          type: "string"
        facebook:
          type: "string"
          description: "facebook page"
        insta:
          type: "string"
          description: "instagram profile id"
        adresses:
          type: "array"
          description: "addresses of agency"
          items:
            $ref: "#/components/schemas/Address"
        contacts:
          type: "array"
          description: "contacts of agency"
          items:
            $ref: "#/components/schemas/Contact"
    Address:
      type: "object"
      required:
        - adressLine1
        - city
      properties:
        adressLine1:
          type: "string"
        adressLine2:
          type: "string"
        area:
          type: "string"
        city:
          type: "string"
        country:
          type: "string"
        zip:
          type: "string"
    Contact:
      type: "object"
      required:
        - name
      properties:
        name:
          type: "string"
        tel:
          type: "string"
        mobile:
          type: "string"
        email:
          type: "string"
    Agency:
      type: "object"
      required:
        - id
        - name
      properties:
        id:
          type: "string"
        updatedAt:
          type: "string"
          format: "date-time"
        name:
          type: "string"
        tel:
          type: "string"
        facebook:
          type: "string"
          description: "facebook page"
        insta:
          type: "string"
          description: "instagram profile id"
        adresses:
          type: "array"
          description: "addresses of agency"
          items:
            $ref: "#/components/schemas/Address"
        contacts:
          type: "array"
          description: "contacts of agency"
          items:
            $ref: "#/components/schemas/Contact"
    AgencyPage:
      type: "object"
      required:
        - page
        - total
      properties:
        page:
          type: integer
          description: page no of data result in pagination
        size:
          type: integer
          description: no of data elements in page
        data:
          type: array
          items:
            $ref: "#/components/schemas/Agency"
          description: data elements list in page
        total:
          type: integer
          format: int64
          description: total elements in the list
    AgentRequest:
      type: "object"
      required:
        - username
        - password
        - email
        - name
      properties:
        name:
          type: "string"
        serviceAreas:
          type: "string"
        specialties:
          type: "string"
          description: "agent specialties"
        position:
          type: "string"
          description: "agent position"
        license:
          type: "string"
          description: "agent position"
        imageFile:
          type: "string"
          description: "uploaded file url"
        address:
          $ref: "#/components/schemas/Address"
        contact:
          $ref: "#/components/schemas/Contact"
        agency:
          $ref: "#/components/schemas/Source"
        username:
          type: "string"
          description: "Username"
        password:
          type: "string"
          description: "Password"
        email:
          type: "string"
          description: "email"
    Agent:
      type: "object"
      required:
        - id
        - name
      properties:
        id:
          type: "string"
        updatedAt:
          type: "string"
          format: "date-time"
        name:
          type: "string"
        serviceAreas:
          type: "string"
        specialties:
          type: "string"
          description: "agent specialties"
        position:
          type: "string"
          description: "agent position"
        license:
          type: "string"
          description: "agent position"
        imageFile:
          type: "string"
          description: "uploaded file url"
        address:
          $ref: "#/components/schemas/Address"
        contact:
          $ref: "#/components/schemas/Contact"
        agency:
          $ref: "#/components/schemas/Source"
    AgentPage:
      type: "object"
      required:
        - page
        - size
        - total
      properties:
        page:
          type: integer
          description: page no of data result in pagination
        size:
          type: integer
          description: no of data elements in page
        data:
          type: array
          items:
            $ref: "#/components/schemas/Agent"
          description: data elements list in page
        total:
          type: integer
          format: int64
          description: total elements in the list
    Source:
      type: "object"
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: source identifier
        name:
          type: string
          description: key value of the  source
    Property:
      type: "object"
      required:
        - id
        - identifier
        - title
      properties:
        id:
          type: string
          description: source identifier
        updatedAt:
          type: "string"
          format: "date-time"
        identifier:
          type: string
          description: unique identifer
        title:
          type: string
          description: property title
          example: 1BHK 2Baths
        status:
          type: string
          example: Available
        statusId:
          type: string
          example : xxxxxxxxxxxxxxxxxxxxxxxx
        propFor:
          type: string
          example: Rent
        propForId:
          type: string
          example : xxxxxxxxxxxxxxxxxxxxxxxx
        type:
          type: string
          example : Residential
        typeId:
          type: string
          example : xxxxxxxxxxxxxxxxxxxxxxxx
        subType:
          type: string
          example : Apartment
        rentingType:
          type: string
          example: Daily
        rentingTypeId:
          type: string
          example : xxxxxxxxxxxxxxxxxxxxxxxx
        location:
          type: string
          example : Al Jerf Industrial 3
        locationId:
          type: string
          example : xxxxxxxxxxxxxxxxxxxxxxxx
        tags:
          type: array
          items:
            type: string
          example : ['RESALE']
        description:
          type: string
          example : description for detailing the property
        price:
          type: number
          format: double
          description : Sale or Rent Price
          example : 1.12
        sqFt:
          type: number
          format: double
          example : 430
        sqMt:
          type: number
          format: double
          example : 39.95
        buildupArea:
          type: number
          format: double
          example : 39.95
        totalLandArea:
          type: number
          format: double
          example : 39.95
        bathrooms:
          type: integer
          example : 2
        bedrooms:
          type: integer
          example : 1
        yearBuilt:
          type: string
          example: 2016
        rooms:
          type: integer
          example : 1
        parking:
          type: integer
          example : 1
        garage:
          type: integer
          example : 1
        garageSize:
          type: number
          format: double
          example : 100
        availabilityDate:
          type: "string"
          format: "date-time"
          example : 2022-06-09T00:00:00.00Z
        features:
          type: array
          items:
            type: string
          example : ['READY TO MOVE']
        genFeatures:
          type: array
          items:
            type: string
          example : ['Laundry Room']
        nearby:
          type: array
          items:
            type: string
          example : ['Laundry Room']
        tel:
          type: string
          example : 455467898
        phoneNo:
          type: string
          example: 987655578
        address:
          $ref: "#/components/schemas/Address"
        floorPlan:
          $ref: "#/components/schemas/FloorPlan"
        project:
          $ref: "#/components/schemas/Project"
        disclaimer:
          type: string
        files:
          type: array
          items:
            $ref: "#/components/schemas/Fileo"
          description: files for property
        assocWith:
          $ref: "#/components/schemas/Source"
        managedBy:
          $ref: "#/components/schemas/Source"
    Project:
      type: "object"
      required:
        - name
      properties:
        name:
          type: string
          description: name of the project
        overview:
          type: string
          description: project short overview
    FloorPlan:
      type: "object"
      required:
        - title
      properties:
        title:
          type: string
          description: title of the floor
        bedroom:
          type: integer
        bathroom:
          type: integer
        price:
          type: number
          format: double
          description : Sale or Rent Price
        postFixPrice:
          type: string
        planSize:
          type: number
          format: double
        planImage:
          $ref: "#/components/schemas/Fileo"
        description:
          type: string
          description: floor short overview
    PropertyPage:
      type: "object"
      required:
        - total
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Property"
          description: data elements list in page
        total:
          type: integer
          format: int64
          description: total elements in the list
    PropertySpec:
      type: "object"
      properties:
        types:
          type: array
          items:
            $ref: "#/components/schemas/TypeRel"
          description: property types
        statusIds:
          type: "array"
          description: "status ids"
          items:
            type: string
        locationIds:
          type: "array"
          description: "location ids"
          items:
            type: string
        bedroom:
          type: integer
          description: no of bedroom
    TypeRel:
      type: "object"
      required:
        - typeId
        - type
        - subType
      properties:
        typeId:
          type: string
        type:
          type: string
        subType:
          type: string
    Requirement:
      type: "object"
      required:
        - title
      properties:
        id:
          type: string
          description: source identifier
        updatedAt:
          type: "string"
          format: "date-time"
        name:
          type: string
          description: title summary
        email:
          type: string
        phoneNo:
          type: string
        whatsapp:
          type: string
          description: whatsapp
        message:
          type: string
          description: application
        featured:
          type: boolean
          description: is feature listing
        listingExpDate:
          type: "string"
          format: "date-time"
        postedDate:
          type: "string"
          format: "date-time"
        postedBy:
          $ref: "#/components/schemas/Source"
    RequirementPage:
      type: "object"
      required:
        - page
        - size
        - total
      properties:
        page:
          type: integer
          description: page no of data result in pagination
        size:
          type: integer
          description: no of data elements in page
        data:
          type: array
          items:
            $ref: "#/components/schemas/Requirement"
          description: data elements list in page
        total:
          type: integer
          format: int64
          description: total elements in the list
    Fileo:
      type: "object"
      required:
        - link
      properties:
        link:
          type: string
          description: downloadable link
        name:
          type: string
          description: file name
    UserPage:
      type: "object"
      required:
        - page
        - size
        - total
      properties:
        page:
          type: integer
          description: page no of data result in pagination
        size:
          type: integer
          description: no of data elements in page
        data:
          type: array
          items:
            $ref: "#/components/schemas/User"
          description: data elements list in page
        total:
          type: integer
          format: int64
          description: total elements in the list
    User:
      type: "object"
      required:
        - id
        - updatedAt
        - username
        - password
        - email
        - name
      properties:
        id:
          type: "string"
        updatedAt:
          type: "string"
          format: "date-time"
        username:
          type: "string"
          description: "Username"
        password:
          type: "string"
          description: "Password"
        name:
          type: "string"
          description: "name"
        email:
          type: "string"
          description: "email"
        roles:
          type: "array"
          description: "roles, admin, agent, agency, user (individual), owner"
          items:
            type: string
          example: ['admin', 'agent', 'agency', 'owner', 'user']
    ChangePassword:
      type: "object"
      required:
        - username
        - password
      properties:
        username:
          type: "string"
        password:
          type: "string"
          description: "Password"
    Lead:
      type: "object"
      required:
        - type
        - typeId
        - phoneNo
      properties:
        id:
          type: string
          description: source identifier
        updatedAt:
          type: "string"
          format: "date-time"
        type:
          type: string
        typeId:
          type: string
        name:
          type: string
          description: name of the person who is inquiring
        firstName:
          type: string
          description: first name of the person who is inquiring
        lastName:
          type: string
          description: last name of the person who is inquiring
        email:
          type: string
        phoneNo:
          type: string
    LeadPage:
      type: "object"
      required:
        - page
        - size
        - total
      properties:
        page:
          type: integer
          description: page no of data result in pagination
        size:
          type: integer
          description: no of data elements in page
        data:
          type: array
          items:
            $ref: "#/components/schemas/Lead"
          description: data elements list in page
        total:
          type: integer
          format: int64
          description: total elements in the list
    Enquiry:
      type: "object"
      required:
        - contact
        - propType
        - propTypeId
        - enqType
        - enqTypeId
      properties:
        id:
          type: string
          description: source identifier
        updatedAt:
          type: "string"
          format: "date-time"
        contact:
          $ref: "#/components/schemas/Contact"
        enqType:
          type: string
        enqTypeId:
          type: string
        propType:
          type: string
        propTypeId:
          type: string
        priceFrom:
          type: number
          format: double
        priceTo:
          type: number
          format: double
        bedMin:
          type: integer
        bedMax:
          type: integer
        bathMin:
          type: integer
        bathMax:
          type: integer
        sqftMin:
          type: number
          format: double
        sqftMax:
          type: number
          format: double
        address:
          $ref: "#/components/schemas/Address"
        notes:
          type: string
          description: notes for the person who is inquiring
    EnquiryPage:
      type: "object"
      required:
        - page
        - size
        - total
      properties:
        page:
          type: integer
          description: page no of data result in pagination
        size:
          type: integer
          description: no of data elements in page
        data:
          type: array
          items:
            $ref: "#/components/schemas/Enquiry"
          description: data elements list in page
        total:
          type: integer
          format: int64
          description: total elements in the list
security:
  - bearerAuth: []  
